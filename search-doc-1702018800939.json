[{"title":"ServiceAPI","type":0,"sectionRef":"#","url":"/StardustRewrite/api/ServiceAPI","content":"On this page ServiceAPI The foundational system that provides the management of services' initialization and interactions. Some things to keep in mind whilst making services: At the moment, there is not a system to prevent race conditions from forming (i.e service A needs to wait for service B, and service B needs to wait for service C, and service C needs service A to work). Refer to the Development Workflow document for more information","keywords":""},{"title":"AssetService","type":0,"sectionRef":"#","url":"/StardustRewrite/api/AssetService","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"AssetService","url":"/StardustRewrite/api/AssetService#functions","content":" "},{"title":"DownloadAssets​","type":1,"pageTitle":"AssetService","url":"/StardustRewrite/api/AssetService#DownloadAssets","content":"&lt;/&gt; AssetService.DownloadAssets( downloadConfig: DownloadConfig-- The information that contains what to download and how to set it up. ) → () Requests to download assets according to the configured input. After assets are successfully downloaded, they are added into the service's storage.  "},{"title":"GetAssetsByCategory​","type":1,"pageTitle":"AssetService","url":"/StardustRewrite/api/AssetService#GetAssetsByCategory","content":"&lt;/&gt; AssetService.GetAssetsByCategory( Category: string-- The category of which to retreive from. ) → {Asset}-- An array of all assets found to have the inputted category. Returns assets that contain the inputted Category from the service's storage.  "},{"title":"GetAssetsByCategories​","type":1,"pageTitle":"AssetService","url":"/StardustRewrite/api/AssetService#GetAssetsByCategories","content":"&lt;/&gt; AssetService.GetAssetsByCategories( Categories: {string}-- An array of categories of which assets belong to. ) → {Asset}-- An array of all assets found to have the inputted categories. Returns assets that belong to all inputted Categories from the service's storage.  "},{"title":"GetCategories​","type":1,"pageTitle":"AssetService","url":"/StardustRewrite/api/AssetService#GetCategories","content":"&lt;/&gt; AssetService.GetCategories() → {[string]:true}-- A dictionary containing the names of all categories in the key. Returns a dictionary of all categories present within the service's storage.  "},{"title":"GetAll​","type":1,"pageTitle":"AssetService","url":"/StardustRewrite/api/AssetService#GetAll","content":"&lt;/&gt; AssetService.GetAll() → {Asset}-- An array of all assets found within the service's storage. Returns all assets present within the service's storage. "},{"title":"Combinations","type":0,"sectionRef":"#","url":"/StardustRewrite/api/Combinations","content":"On this page Combinations A library that helps generate every combination available from an inputted array.","keywords":""},{"title":"LibraryAPI","type":0,"sectionRef":"#","url":"/StardustRewrite/api/LibraryAPI","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"LibraryAPI","url":"/StardustRewrite/api/LibraryAPI#types","content":" "},{"title":"Library​","type":1,"pageTitle":"LibraryAPI","url":"/StardustRewrite/api/LibraryAPI#Library","content":"&lt;/&gt; type Library = {[string]: (...any) → (...any?);} A library is any ModuleScript with the LibraryAPI as its parent. The contents returned by this ModuleScript will be the contents made available by LibraryAPI:GetLibrary(LibraryName). A collection of functions that is intended to be used in other scripts/modules. Intended to not be constantly active. "},{"title":"Functions​","type":1,"pageTitle":"LibraryAPI","url":"/StardustRewrite/api/LibraryAPI#functions","content":" "},{"title":"GetLibrary​","type":1,"pageTitle":"LibraryAPI","url":"/StardustRewrite/api/LibraryAPI#GetLibrary","content":"&lt;/&gt; LibraryAPI:GetLibrary(LibraryName: string) → Library Returns an initialized Library. "},{"title":"Landing","type":0,"sectionRef":"#","url":"/StardustRewrite/docs/intro","content":"Landing Test","keywords":""},{"title":"PackageToAssetConverter","type":0,"sectionRef":"#","url":"/StardustRewrite/api/PackageToAssetConverter","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"PackageToAssetConverter","url":"/StardustRewrite/api/PackageToAssetConverter#types","content":" "},{"title":"PackageToAssetConverter​","type":1,"pageTitle":"PackageToAssetConverter","url":"/StardustRewrite/api/PackageToAssetConverter#PackageToAssetConverter","content":"&lt;/&gt; interface PackageToAssetConverter { CheckPackage: (newPackage: Package) → ( boolean, string? )-- Used to verify that an inputted package qualifies for usage within the environment. ToAsset: (newPackage: Package) → ({Asset})-- Used to get the assets from the package, alongside add categories and other data for each asset. }   "},{"title":"DownloadConfig​","type":1,"pageTitle":"PackageToAssetConverter","url":"/StardustRewrite/api/PackageToAssetConverter#DownloadConfig","content":"&lt;/&gt; interface DownloadConfig { AssetID: number-- The assetID of the packge being downloaded. ConverterType: string-- The name of the PackageToAssetConverter that the package will verified and intialized by. }  "},{"title":"AssetLib","type":0,"sectionRef":"#","url":"/StardustRewrite/api/AssetLib","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"AssetLib","url":"/StardustRewrite/api/AssetLib#types","content":" "},{"title":"Asset​","type":1,"pageTitle":"AssetLib","url":"/StardustRewrite/api/AssetLib#Asset","content":"&lt;/&gt; type Asset = Instance  An Instance that'll eventually be used within the game. Originates from Packages. Assets don't have a specific format, as it could be literally anything. But it is important to mark them so they could be updated later. This will happen when a new update was found for asset's parent package.  "},{"title":"AssetMetadata​","type":1,"pageTitle":"AssetLib","url":"/StardustRewrite/api/AssetLib#AssetMetadata","content":"&lt;/&gt; interface AssetMetadata { ParentPackage: ObjectValue -- Stores the Package Instance of which the asset originates from. Counts: Folder -- Stores various counts in its attributes. Categories: Folder -- Stores the categories of which the asset belongs to in its attributes. CategoryAdded: BindableEvent -- Fired when a new category is added. CategoryRemoved: BindableEvent -- Fired when a category is removed. ToInfo: BindableFunction -- Contains the function that returns read-only data of the asset. } Unique data that is used to determine the logic within Asset. "},{"title":"Functions​","type":1,"pageTitle":"AssetLib","url":"/StardustRewrite/api/AssetLib#functions","content":" "},{"title":"setup​","type":1,"pageTitle":"AssetLib","url":"/StardustRewrite/api/AssetLib#setup","content":"constructor &lt;/&gt; AssetLib.setup( newAsset: Asset,-- The instance being wrapped. parentPackage: Package-- The package of which the asset originated from. ) → () Sets up the inputted Asset for use in this Lib by creating a AssetMetadata object linked to the input.  "},{"title":"SetParentPackage​","type":1,"pageTitle":"AssetLib","url":"/StardustRewrite/api/AssetLib#SetParentPackage","content":"utility &lt;/&gt; AssetLib.SetParentPackage( asset: Asset, parentPackage: PackageLibTypes.Package ) → () Sets the ParentPackage to the inputted Package.  "},{"title":"GetCategories​","type":1,"pageTitle":"AssetLib","url":"/StardustRewrite/api/AssetLib#GetCategories","content":"utility &lt;/&gt; AssetLib.GetCategories(asset: Asset) → () Adds a category to the Asset and logs it into AssetService.  "},{"title":"AddCategory​","type":1,"pageTitle":"AssetLib","url":"/StardustRewrite/api/AssetLib#AddCategory","content":"utility &lt;/&gt; AssetLib.AddCategory( asset: Asset, Category: string ) → () Adds a category to the Asset and logs it into AssetService.  "},{"title":"RemoveCategory​","type":1,"pageTitle":"AssetLib","url":"/StardustRewrite/api/AssetLib#RemoveCategory","content":"utility &lt;/&gt; AssetLib.RemoveCategory( asset: Asset, Category: string ) → () Removes a category to the Asset and logs it into AssetService.  "},{"title":"SetToInfo​","type":1,"pageTitle":"AssetLib","url":"/StardustRewrite/api/AssetLib#SetToInfo","content":"utility &lt;/&gt; AssetLib.SetToInfo( asset: Asset, ToInfo: ( asset: Asset, Player: Player ) → ({[string]: any}) ) → () Overrides the default ToInfo function.  "},{"title":"HasPermission​","type":1,"pageTitle":"AssetLib","url":"/StardustRewrite/api/AssetLib#HasPermission","content":"utility &lt;/&gt; AssetLib.HasPermission( asset: Asset, _Player: Player ) → ()   "},{"title":"GetInfo​","type":1,"pageTitle":"AssetLib","url":"/StardustRewrite/api/AssetLib#GetInfo","content":"utility &lt;/&gt; AssetLib.GetInfo( asset: Asset, Player: Player ) → {[string]: any}   "},{"title":"HasCategory​","type":1,"pageTitle":"AssetLib","url":"/StardustRewrite/api/AssetLib#HasCategory","content":"utility &lt;/&gt; AssetLib.HasCategory( asset: Asset, Category: string ) → boolean Checks if the Asset is part of the inputted Category,  "},{"title":"HasCategories​","type":1,"pageTitle":"AssetLib","url":"/StardustRewrite/api/AssetLib#HasCategories","content":"utility &lt;/&gt; AssetLib.HasCategories( asset: Asset, Categories: {string} ) → boolean Checks if the Asset is part of the inputted Categories. "},{"title":"AssetImporter","type":0,"sectionRef":"#","url":"/StardustRewrite/api/AssetImporter","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"AssetImporter","url":"/StardustRewrite/api/AssetImporter#functions","content":" "},{"title":"DownloadLatestPackage​","type":1,"pageTitle":"AssetImporter","url":"/StardustRewrite/api/AssetImporter#DownloadLatestPackage","content":"&lt;/&gt; AssetImporter.DownloadLatestPackage( AssetID: number,-- The AssetId of the package that needs to be downloaded. downloadConfig: ConverterLibTypes.DownloadConfig ) → Package?-- The Package that was returned, or nil if it failed to download one. Grabs the latest package of the inserted AssetID from InsertService and loads it through PackageLib.setup. It returns the Package that was given or nil if it failed to download one.  "},{"title":"DownloadPackageVersion​","type":1,"pageTitle":"AssetImporter","url":"/StardustRewrite/api/AssetImporter#DownloadPackageVersion","content":"&lt;/&gt; AssetImporter.DownloadPackageVersion( AssetID: number,-- The AssetId of the package that needs to be inserted. Used to record any errors in loading the package. VersionID: number?,-- (Opt.) The VersionId of the package that needs to be inserted. If one isn't given, it will grab the latest VersionId of the package. This will be used in InsertService:LoadAssetVersion(VersionID). downloadConfig: ConverterLibTypes.DownloadConfig ) → Package?-- The Package that was returned, or nil if it failed to download one. Grabs the package from InsertService:LoadAssetVersion using the VersionID input and loads it through Package.setup. It returns the Package that was given or nil if it failed to download one. "},{"title":"PackageLib","type":0,"sectionRef":"#","url":"/StardustRewrite/api/PackageLib","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"PackageLib","url":"/StardustRewrite/api/PackageLib#types","content":" "},{"title":"Package​","type":1,"pageTitle":"PackageLib","url":"/StardustRewrite/api/PackageLib#Package","content":"&lt;/&gt; type Package = Instance  An Instance inserted into the game via AssetImporter that holds Assets.  "},{"title":"PackageMetadata​","type":1,"pageTitle":"PackageLib","url":"/StardustRewrite/api/PackageLib#PackageMetadata","content":"&lt;/&gt; interface PackageMetadata { LinkedAssets: Folder -- Stores ObjectValues, each of which points to an Asset. UpToDate: boolean-- (Attribute) If the package is the latest version. AssetID: number-- (Attribute) The AssetID of the package. Found by right-clicking the package in the Roblox Studio Asset Manager and selecting Copy Asset ID. AssetVersionID:: number-- (Attribute) The VersionID of the package. Only found by using InsertService:GetLatestAssetVersionAsync(AssetID). God damn it roblox...💀 } Unique data that is used to determine the logic within Packages. "},{"title":"Functions​","type":1,"pageTitle":"PackageLib","url":"/StardustRewrite/api/PackageLib#functions","content":" "},{"title":"setup​","type":1,"pageTitle":"PackageLib","url":"/StardustRewrite/api/PackageLib#setup","content":"&lt;/&gt; PackageLib.setup( newPackage: Package,-- The Instance of which is being tracked as a Package. packageConfig: DownloadConfig,-- Information on how to initialize newPackage. AssetID: number,-- The AssetID of the package. VersionID: number-- The VersionID of the package. ) → true Sets up metadata for the inputted Package and runs PackageLib.CheckPackage. "},{"title":"Errors","type":1,"pageTitle":"PackageLib","url":"/StardustRewrite/api/PackageLib##","content":"Type\tDescription&quot;No AssetID was passed in!&quot;\tOccurs when no AssetID was passed into the function. &quot;Overriding [OldPackage] with [newPackage], hopefully this is intentional!&quot;\tOccurs when an existing package was found, and is being deleted for the new package. Any other message\tIf any other error occurs, it was raised by PackageLib.CheckPackage.  "},{"title":"CheckForUpdates​","type":1,"pageTitle":"PackageLib","url":"/StardustRewrite/api/PackageLib#CheckForUpdates","content":"&lt;/&gt; PackageLib.CheckForUpdates(package: Package) → () Runs InsertService:GetLatestAssetVersionAsync(package.AssetID) and checks if the current AssetVersionID matches the latest AssetVersionID.  "},{"title":"CheckPackage​","type":1,"pageTitle":"PackageLib","url":"/StardustRewrite/api/PackageLib#CheckPackage","content":"&lt;/&gt; PackageLib.CheckPackage( package: Package, packageConfig: ConverterLibTypes.DownloadConfig ) → () Runs PackageToAssetConverter.CheckPackage  "},{"title":"ToAsset​","type":1,"pageTitle":"PackageLib","url":"/StardustRewrite/api/PackageLib#ToAsset","content":"&lt;/&gt; PackageLib.ToAsset( package: Package, packageConfig: ConverterLibTypes.DownloadConfig ) → {Instance } Runs PackageToAssetConverter.ToAsset  "},{"title":"TrackAsset​","type":1,"pageTitle":"PackageLib","url":"/StardustRewrite/api/PackageLib#TrackAsset","content":"&lt;/&gt; PackageLib.TrackAsset( package: Package, asset: AssetLibTypes.Asset ) → () Adds the inputted asset to PackageMetaData.LinkedAssets  "},{"title":"UntrackAsset​","type":1,"pageTitle":"PackageLib","url":"/StardustRewrite/api/PackageLib#UntrackAsset","content":"&lt;/&gt; PackageLib.UntrackAsset( package: Package, asset: AssetLibTypes.Asset ) → () Removes the inputted asset from PackageMetaData.LinkedAssets "},{"title":"CoreAPI","type":0,"sectionRef":"#","url":"/StardustRewrite/api/CoreAPI","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"CoreAPI","url":"/StardustRewrite/api/CoreAPI#types","content":" "},{"title":"CoreAPI​","type":1,"pageTitle":"CoreAPI","url":"/StardustRewrite/api/CoreAPI#CoreAPI","content":"&lt;/&gt; interface CoreAPI { LibraryAPI: LibraryAPI ServiceAPI: ServiceAPI } The table returned when the framework's module is required. "},{"title":"SearchTreeLib","type":0,"sectionRef":"#","url":"/StardustRewrite/api/SearchTreeLib","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"SearchTreeLib","url":"/StardustRewrite/api/SearchTreeLib#types","content":" "},{"title":"SearchTreeRoot​","type":1,"pageTitle":"SearchTreeLib","url":"/StardustRewrite/api/SearchTreeLib#SearchTreeRoot","content":"&lt;/&gt; type SearchTreeRoot = Node The node that represents the foundational/primary part of the search tree. "},{"title":"Functions​","type":1,"pageTitle":"SearchTreeLib","url":"/StardustRewrite/api/SearchTreeLib#functions","content":" "},{"title":"new​","type":1,"pageTitle":"SearchTreeLib","url":"/StardustRewrite/api/SearchTreeLib#new","content":"&lt;/&gt; SearchTreeLib.new( Name: string-- The name of the node. ) → SearchTreeRoot-- The node that was created. Creates a new SearchTreeRoot.  "},{"title":"GetTags​","type":1,"pageTitle":"SearchTreeLib","url":"/StardustRewrite/api/SearchTreeLib#GetTags","content":"&lt;/&gt; SearchTreeLib.GetTags( self: SearchTreeRoot-- The root of the tree we're getting the tags from. ) → {[string]: true?}-- A dictionary containing all of the involved tags. Gets the tags involved in the tree.  "},{"title":"AddToTag​","type":1,"pageTitle":"SearchTreeLib","url":"/StardustRewrite/api/SearchTreeLib#AddToTag","content":"&lt;/&gt; SearchTreeLib.AddToTag( self: SearchTreeRoot,-- The root of the tree we're adding the item to. item: any,-- The item we want to add. TagName: string-- The tag that the item belongs to. ) → () Adds an item to a tag. If the item was never added before, track it within the root, too.  "},{"title":"RemoveFromTag​","type":1,"pageTitle":"SearchTreeLib","url":"/StardustRewrite/api/SearchTreeLib#RemoveFromTag","content":"&lt;/&gt; SearchTreeLib.RemoveFromTag( self: SearchTreeRoot,-- The root of the tree we're removing the item from. item: any,-- The item we want to remove. TagName: string-- The tag that the item had. ) → () Removes an item from a tag.  "},{"title":"GetByTag​","type":1,"pageTitle":"SearchTreeLib","url":"/StardustRewrite/api/SearchTreeLib#GetByTag","content":"&lt;/&gt; SearchTreeLib.GetByTag( self: SearchTreeRoot,-- The root of the tree we're getting items from. TagName: string-- The tag that we want the items to have. ) → {[number]: T} Gets items a tag.  "},{"title":"GetAll​","type":1,"pageTitle":"SearchTreeLib","url":"/StardustRewrite/api/SearchTreeLib#GetAll","content":"&lt;/&gt; SearchTreeLib.GetAll( self: SearchTreeRoot-- The root of the tree we're getting items from. ) → {[number]: T} Gets items all items within the tree.  "},{"title":"PremapSearch​","type":1,"pageTitle":"SearchTreeLib","url":"/StardustRewrite/api/SearchTreeLib#PremapSearch","content":"&lt;/&gt; SearchTreeLib.PremapSearch( self: SearchTreeRoot,-- The root of the tree we're premapping. TagNames: {string}-- The tags that we want the tree to have. ) → () Updates the tree to ensure there's no empty nodes.  "},{"title":"GetByTags​","type":1,"pageTitle":"SearchTreeLib","url":"/StardustRewrite/api/SearchTreeLib#GetByTags","content":"&lt;/&gt; SearchTreeLib.GetByTags( self: SearchTreeRoot,-- The root of the tree we're getting items from. TagNames: {string}-- The tags that we want the items to have. ) → {[number]: T} Gets items a set of tags.  "},{"title":"CleanUp​","type":1,"pageTitle":"SearchTreeLib","url":"/StardustRewrite/api/SearchTreeLib#CleanUp","content":"&lt;/&gt; SearchTreeLib.CleanUp(self: SearchTreeRoot&lt;T&gt;) → () Cleans up the root's data. "},{"title":"Development Workflow","type":0,"sectionRef":"#","url":"/StardustRewrite/docs/Development Workflow/","content":"","keywords":""},{"title":"Glossary​","type":1,"pageTitle":"Development Workflow","url":"/StardustRewrite/docs/Development Workflow/#glossary","content":""},{"title":"What is a Framework?​","type":1,"pageTitle":"Development Workflow","url":"/StardustRewrite/docs/Development Workflow/#what-is-a-framework","content":"The foundation of which everything is built on with an established workflow of adding and managing systems. In a sense, the casing of a gearbox. "},{"title":"What is a Library?​","type":1,"pageTitle":"Development Workflow","url":"/StardustRewrite/docs/Development Workflow/#what-is-a-library","content":"A module (or set of modules) that can be initialized by itself and is intended to be used by Services. Interdependcies should not occur between libraries. In a sense, a cog/gear that is added to the gearbox. "},{"title":"What is a Service?​","type":1,"pageTitle":"Development Workflow","url":"/StardustRewrite/docs/Development Workflow/#what-is-a-service","content":"A module that uses libraries to create complex features that expands upon the functionality provided by the libraries, other services, and configurations. How the gearbox interacts with anything outside and within of it. "},{"title":"Contributing to the Environment​","type":1,"pageTitle":"Development Workflow","url":"/StardustRewrite/docs/Development Workflow/#contributing-to-the-environment","content":""},{"title":"Creating a Library​","type":1,"pageTitle":"Development Workflow","url":"/StardustRewrite/docs/Development Workflow/#creating-a-library","content":"A library is any ModuleScript with the LibraryAPI as its parent. The contents returned by this ModuleScript will be the contents made available by LibraryAPI:GetLibrary(LibraryName). To create a library, the following should be kept in mind: A new library's module is expected to return a table of functions that can be used by other systems.The library should be able to function by itself. Any dependancies of the library should not involve other external libraries. If there are any dependancies or &quot;sub-libraries&quot;, then they could be directly required within the root of the library. This is becaues the LibraryAPI only requires the root of the library, and none of the descendants. The library should refrain from modifying data outside of itself to prevent unexpected data-structure changes. Any unique data should be managed and stored within the library. Generally, a rudamentary library structure would look like the following: --Descendant Dependacies Here local MetadataManagement = require(script.Metadata) local NewLibrary = {} -- Any local variables or procedures here -- Any number of functions here function NewLibrary.fooBar() -- can be anything here end export type NewLibraryLib = typeof(NewLibrary) --An exported type such that this library's functionality could be accessed by other systems. --If you're using &quot;Roblox LSP&quot;, you could get this type by using &quot;---@module &lt;path to this Library&gt;&quot; return NewLibrary  If you're using Visual Studio Code, here's a quick snippet you can use: [ &quot;local ${0:$TM_FILENAME_BASE} = {}&quot;, &quot;&quot;, &quot;${1}&quot;, &quot;&quot;, &quot;export type ${0:$TM_FILENAME_BASE}Lib = typeof(${0:$TM_FILENAME_BASE})&quot;, &quot;&quot;, &quot;return ${0:$TM_FILENAME_BASE}&quot; ]  "},{"title":"Creating a Service​","type":1,"pageTitle":"Development Workflow","url":"/StardustRewrite/docs/Development Workflow/#creating-a-service","content":"A Service is a ModuleScript with the ServiceAPI as its parent. Services depends on the libraries present within the LibraryAPI along with other services within the ServiceAPI. Some things to keep in mind whilst making services: At the moment, there is not a system to prevent race conditions from forming (i.e service A needs to wait for service B, and service B needs to wait for service C, and service C needs service A to work). Unlike a typical ModuleScript, a Service ModuleScript's structure would look like the following: local ServiceAPITypes = script.Parent --Gets the Service's Type for intellisense local ServiceAPI: ServiceAPITypes.ServiceAPI = select(1, ...); --Waits for the ServiceAPI itself to be returned so it can access other services. if (not ServiceAPI) then local ThreadScope: (...any) -&gt; any? = debug.info(coroutine.running(), 1, &quot;f&quot;); return ThreadScope; end local LibraryAPI = ServiceAPI:GetService(&quot;LibraryAPI&quot;) --Gets the LibraryAPI so we could access all libraries. local NewLibraryLib = LibraryAPI:GetLibrary(&quot;NewLibrary&quot;) --Assuming we created the &quot;Creating a Library&quot; example, we can grab it by invoking LibraryAPI:GetLibrary. local NewService = ServiceAPI.Draft(&quot;NewServiceName&quot;) do -- Any local variables or procedures here -- Any number of functions here function NewService.invokeFancyMelon() --Can be anything really. In this case, we'll use fooBar from the NewLibrary return NewLibraryLib.fooBar() end end export type NewService = typeof(NewService) --An exported type such that this library's functionality could be accessed by other systems. --If you're using &quot;Roblox LSP&quot;, you could get this type by using &quot;---@module &lt;path to this Library&gt;&quot; ServiceAPI:Publish(NewService) --Let the ServiceAPI know that this service has finished initializing and is ready to be used by other services.  If you're using Visual Studio Code, here's a quick snippet you can use: [ &quot;local ServiceAPITypes = script.Parent&quot;, &quot;local ServiceAPI: ServiceAPITypes.ServiceAPI = select(1, ...);&quot;, &quot;if (not ServiceAPI) then&quot;, &quot;\\tlocal ThreadScope: (...any) -&gt; any? = debug.info(coroutine.running(), 1, \\&quot;f\\&quot;);&quot;, &quot;\\treturn ThreadScope;&quot;, &quot;end&quot;, &quot;local LibraryAPI = ServiceAPI:GetService(\\&quot;LibraryAPI\\&quot;) --Gets the LibraryAPI so we could access all libraries.&quot;, &quot;&quot;, &quot;&quot;, &quot;local ${0:$TM_FILENAME_BASE} = ServiceAPI.Draft(\\&quot;${0:$TM_FILENAME_BASE}\\&quot;) do&quot;, &quot;\\t${1}&quot;, &quot;end&quot;, &quot;export type ${0:$TM_FILENAME_BASE}Lib = typeof(${0:$TM_FILENAME_BASE})&quot;, &quot;&quot;, &quot;return ${0:$TM_FILENAME_BASE}&quot; ]  "},{"title":"NodeLib","type":0,"sectionRef":"#","url":"/StardustRewrite/api/NodeLib","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"NodeLib","url":"/StardustRewrite/api/NodeLib#types","content":" "},{"title":"NodeInstance​","type":1,"pageTitle":"NodeLib","url":"/StardustRewrite/api/NodeLib#NodeInstance","content":"&lt;/&gt; interface NodeInstance { Name: string | number-- The name of the node. It's usually a unique NodeID. Tags: Folder -- A folder containing Folders of all tags that the node has. Contents: Folder -- A folder containing Bookmarks to items that belong to the node. Parents: Folder -- A folder containing NodeLinks to every parent node. Children: Folder -- A folder containing NodeLinks to every child node. }   "},{"title":"TagRef​","type":1,"pageTitle":"NodeLib","url":"/StardustRewrite/api/NodeLib#TagRef","content":"&lt;/&gt; type TagRef = Folder  A special type of Folder where its name is the name of the Tag it represents.  "},{"title":"Bookmark​","type":1,"pageTitle":"NodeLib","url":"/StardustRewrite/api/NodeLib#Bookmark","content":"&lt;/&gt; type Bookmark = ObjectValue  A special type of ObjectValue to reference the original instance.  "},{"title":"NodeLink​","type":1,"pageTitle":"NodeLib","url":"/StardustRewrite/api/NodeLib#NodeLink","content":"&lt;/&gt; type NodeLink = ObjectValue  A special type of ObjectValue where the name represents the relationship between the node and the value. The value of this is another NodeInstance. "},{"title":"Functions​","type":1,"pageTitle":"NodeLib","url":"/StardustRewrite/api/NodeLib#functions","content":" "},{"title":"toString​","type":1,"pageTitle":"NodeLib","url":"/StardustRewrite/api/NodeLib#toString","content":"&lt;/&gt; NodeLib.toString( self: NodeInstance-- The node to get information from. ) → string-- A string with the node's contents, name, tags, parents, and children. Returns node information as a string from the passed in Node.  "},{"title":"new​","type":1,"pageTitle":"NodeLib","url":"/StardustRewrite/api/NodeLib#new","content":"&lt;/&gt; NodeLib.new( DisplayName: string,-- The name that will appear for the node when NodeLib.toString is used on it. Parent: NodeInstance | false,-- The node instance that would be the parent of this new node. If &quot;false&quot; is inputted, then the node is considered a &quot;root.&quot; LinkDesc: string-- The relationship between the Parent and this new node. ) → NodeInstance-- The node that was created. Creates a new NodeInstance.  "},{"title":"AddTag​","type":1,"pageTitle":"NodeLib","url":"/StardustRewrite/api/NodeLib#AddTag","content":"&lt;/&gt; NodeLib.AddTag( self: NodeInstance,-- The node that the tag will be added to. TagName: string-- The tag being added ) → () Adds a tag to the node. Created to assign &quot;categories&quot;.  "},{"title":"RemoveTag​","type":1,"pageTitle":"NodeLib","url":"/StardustRewrite/api/NodeLib#RemoveTag","content":"&lt;/&gt; NodeLib.RemoveTag( self: NodeInstance,-- The node that the tag will be removed from. TagName: string-- The tag being removed ) → () Removes a tag from the node. Created to remove &quot;categories&quot;.  "},{"title":"GetTags​","type":1,"pageTitle":"NodeLib","url":"/StardustRewrite/api/NodeLib#GetTags","content":"&lt;/&gt; NodeLib.GetTags( self: NodeInstance-- The node that the tags are obtained from. ) → {[string]:any},number-- A dictionary containing all tags, alongside the count. Returns all tags present on the node. Created to manage &quot;categories&quot;.  "},{"title":"GetChildrenNodes​","type":1,"pageTitle":"NodeLib","url":"/StardustRewrite/api/NodeLib#GetChildrenNodes","content":"&lt;/&gt; NodeLib.GetChildrenNodes( self: NodeInstance-- The node that the children are obtained from. ) → {NodeInstance}-- An array of all children. Returns all children present on the node.  "},{"title":"GetChildNodeFromName​","type":1,"pageTitle":"NodeLib","url":"/StardustRewrite/api/NodeLib#GetChildNodeFromName","content":"&lt;/&gt; NodeLib.GetChildNodeFromName( self: NodeInstance,-- The node that the child is obtained from. LinkDesc: string-- The relationship of which the child has to the inputted node. ) → NodeInstance?-- The child node that has the LinkDesc or nil if it doesn't exist. Returns the child node from the node using the provided LinkDesc.  "},{"title":"GetChildNodeFromID​","type":1,"pageTitle":"NodeLib","url":"/StardustRewrite/api/NodeLib#GetChildNodeFromID","content":"&lt;/&gt; NodeLib.GetChildNodeFromID( self: NodeInstance,-- The node that the child is obtained from. ChildID: number-- The ID of the child. ) → NodeInstance?-- The child node that has the NodeID or nil if it doesn't exist. Returns the child node from the node using the provided NodeID.  "},{"title":"GetParentNodes​","type":1,"pageTitle":"NodeLib","url":"/StardustRewrite/api/NodeLib#GetParentNodes","content":"&lt;/&gt; NodeLib.GetParentNodes( self: NodeInstance-- The node that the parents are obtained from. ) → {NodeInstance}-- An array of all parents. Returns all parents present on the node.  "},{"title":"GetParentNodeFromName​","type":1,"pageTitle":"NodeLib","url":"/StardustRewrite/api/NodeLib#GetParentNodeFromName","content":"&lt;/&gt; NodeLib.GetParentNodeFromName( self: NodeInstance,-- The node that the parent is obtained from. LinkDesc: string-- The relationship of which the parent has to the inputted node. ) → NodeInstance?-- The parent node that has the LinkDesc or nil if it doesn't exist. Returns the parent node from the node using the provided LinkDesc.  "},{"title":"GetParentNodeFromID​","type":1,"pageTitle":"NodeLib","url":"/StardustRewrite/api/NodeLib#GetParentNodeFromID","content":"&lt;/&gt; NodeLib.GetParentNodeFromID( self: NodeInstance,-- The node that the parent is obtained from. ParentID: number-- The ID of the parent. ) → NodeInstance?-- The parent node that has the NodeID or nil if it doesn't exist. Returns the parent node from the node using the provided NodeID.  "},{"title":"AddContent​","type":1,"pageTitle":"NodeLib","url":"/StardustRewrite/api/NodeLib#AddContent","content":"&lt;/&gt; NodeLib.AddContent( self: NodeInstance,-- The node that the bookmark is stored. Content: any-- The Instance to track within the node. ) → BookmarkThe[Bookmark]thatistrackingtheContent. Adds a Bookmark for the inputted item into the node.  "},{"title":"GetContent​","type":1,"pageTitle":"NodeLib","url":"/StardustRewrite/api/NodeLib#GetContent","content":"&lt;/&gt; NodeLib.GetContent( self: NodeInstance,-- The node that the bookmark is stored. Content: any-- The Instance we want the bookmark of. ) → Bookmark,Content-- The Bookmark that is tracking the Content and the Content itself. Gets the Bookmark for the inputted item from the node.  "},{"title":"GetContents​","type":1,"pageTitle":"NodeLib","url":"/StardustRewrite/api/NodeLib#GetContents","content":"&lt;/&gt; NodeLib.GetContents( self: NodeInstance-- The node that the content is obtained from. ) → {Content}-- An array containing all of the contents tracked by the node. Gets all of the content tracked by the node.  "},{"title":"RemoveContent​","type":1,"pageTitle":"NodeLib","url":"/StardustRewrite/api/NodeLib#RemoveContent","content":"&lt;/&gt; NodeLib.RemoveContent( self: NodeInstance,-- The node that the content is obtained from. Content: any-- The Instance we want to untrack. ) → () Removes the bookmark of the content tracked by the node.  "},{"title":"Link​","type":1,"pageTitle":"NodeLib","url":"/StardustRewrite/api/NodeLib#Link","content":"&lt;/&gt; NodeLib.Link( self: NodeInstance,-- The node that we're linking from. TargetNode: NodeInstance,-- The node that will be linked to. LinkDesc: string-- The relationship between the two nodes. ) → () Links the inputted node to the TargetNode and labeling the link with the LinkDesc. A link is created on both nodes, where the link for the input node is in Children ,whilst the link for the target node is in Parents.  "},{"title":"Unlink​","type":1,"pageTitle":"NodeLib","url":"/StardustRewrite/api/NodeLib#Unlink","content":"&lt;/&gt; NodeLib.Unlink( self: NodeInstance,-- The node that we're unlinking from. LinkDesc: string | DisplayName-- The relationship that we're unlinking. ) → () Unlinks the inputted node and related TargetNode. The links on both nodes are deleted. For the input node, the link is found in Children. Whilst for the TargetNode, the link is found in Parents.  "},{"title":"CleanUp​","type":1,"pageTitle":"NodeLib","url":"/StardustRewrite/api/NodeLib#CleanUp","content":"&lt;/&gt; NodeLib.CleanUp( self: NodeInstance-- The node that we're cleaning up. ) → () Untracks all of the children and parents within the node to ensure no false references. "}]