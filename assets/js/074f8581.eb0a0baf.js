"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[483],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>y});var n=r(67294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var s=n.createContext({}),c=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},u=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=c(r),h=i,y=d["".concat(s,".").concat(h)]||d[h]||p[h]||a;return r?n.createElement(y,o(o({ref:t},u),{},{components:r})):n.createElement(y,o({ref:t},u))}));function y(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=r.length,o=new Array(a);o[0]=h;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:i,o[1]=l;for(var c=2;c<a;c++)o[c]=r[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}h.displayName="MDXCreateElement"},20460:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var n=r(87462),i=(r(67294),r(3905));const a={},o="Development Workflow",l={unversionedId:"Development Workflow/Development Workflow",id:"Development Workflow/Development Workflow",title:"Development Workflow",description:"This following section is to help establish a foundational understanding of how to work and interact with the framework and existing systems.",source:"@site/docs/Development Workflow/Development Workflow.md",sourceDirName:"Development Workflow",slug:"/Development Workflow/",permalink:"/MoonwaveHolder/docs/Development Workflow/",draft:!1,editUrl:"https://github.com/MFSRoblox/MoonwaveHolder/edit/main/docs/Development Workflow/Development Workflow.md",tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"Landing",permalink:"/MoonwaveHolder/docs/intro"}},s={},c=[{value:"Glossary",id:"glossary",level:2},{value:"What is a Framework?",id:"what-is-a-framework",level:3},{value:"What is a Library?",id:"what-is-a-library",level:3},{value:"What is a Service?",id:"what-is-a-service",level:3},{value:"Contributing to the Environment",id:"contributing-to-the-environment",level:2},{value:"Creating a Library",id:"creating-a-library",level:3},{value:"Creating a Service",id:"creating-a-service",level:3}],u={toc:c},d="wrapper";function p(e){let{components:t,...r}=e;return(0,i.kt)(d,(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"development-workflow"},"Development Workflow"),(0,i.kt)("p",null,"This following section is to help establish a foundational understanding of how to work and interact with the framework and existing systems."),(0,i.kt)("h2",{id:"glossary"},"Glossary"),(0,i.kt)("h3",{id:"what-is-a-framework"},"What is a Framework?"),(0,i.kt)("p",null,"The foundation of which everything is built on with an established workflow of adding and managing systems."),(0,i.kt)("p",null,"In a sense, the casing of a gearbox."),(0,i.kt)("h3",{id:"what-is-a-library"},"What is a Library?"),(0,i.kt)("p",null,"A module (or set of modules) that can be initialized by itself and is intended to be used by Services. Interdependcies should not occur between libraries."),(0,i.kt)("p",null,"In a sense, a cog/gear that is added to the gearbox."),(0,i.kt)("h3",{id:"what-is-a-service"},"What is a Service?"),(0,i.kt)("p",null,"A module that uses libraries to create complex features that expands upon the functionality provided by the libraries, other services, and configurations."),(0,i.kt)("p",null,"How the gearbox interacts with anything outside and within of it."),(0,i.kt)("h2",{id:"contributing-to-the-environment"},"Contributing to the Environment"),(0,i.kt)("h3",{id:"creating-a-library"},"Creating a Library"),(0,i.kt)("p",null,"A library is any ModuleScript with the ",(0,i.kt)("a",{parentName:"p",href:"../../api/LibraryAPI"},"LibraryAPI")," as its parent. The contents returned by this ModuleScript will be the contents made available by ",(0,i.kt)("a",{parentName:"p",href:"../../api/LibraryAPI#GetLibrary"},"LibraryAPI:GetLibrary(LibraryName)"),"."),(0,i.kt)("p",null,"To create a library, the following should be kept in mind:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"A new library's module is expected to return a table of functions that can be used by other systems."),(0,i.kt)("li",{parentName:"ul"},"The library should be able to function by itself. Any dependancies of the library should not involve other external libraries.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},'If there are any dependancies or "sub-libraries", then they could be directly required within the root of the library. This is becaues the LibraryAPI ',(0,i.kt)("em",{parentName:"li"},"only")," requires the root of the library, and none of the descendants."))),(0,i.kt)("li",{parentName:"ul"},"The library should refrain from modifying data outside of itself to prevent unexpected data-structure changes. Any unique data should be managed and stored within the library.")),(0,i.kt)("p",null,"Generally, a rudamentary library structure would look like the following:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'--Descendant Dependacies Here\nlocal MetadataManagement = require(script.Metadata)\nlocal NewLibrary = {}\n-- Any local variables or procedures here\n-- Any number of functions here\nfunction NewLibrary.fooBar()\n    -- can be anything here\nend\n\nexport type NewLibraryLib = typeof(NewLibrary) --An exported type such that this library\'s functionality could be accessed by other systems.\n--If you\'re using "Roblox LSP", you could get this type by using "---@module <path to this Library>"\n\nreturn NewLibrary\n')),(0,i.kt)("p",null,"If you're using Visual Studio Code, here's a quick snippet you can use:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'[\n"local ${0:$TM_FILENAME_BASE} = {}",\n"",\n"${1}",\n"",\n"export type ${0:$TM_FILENAME_BASE}Lib = typeof(${0:$TM_FILENAME_BASE})",\n"",\n"return ${0:$TM_FILENAME_BASE}"\n]\n')),(0,i.kt)("h3",{id:"creating-a-service"},"Creating a Service"),(0,i.kt)("p",null,"A Service is a ModuleScript with the ",(0,i.kt)("a",{parentName:"p",href:"../../api/ServiceAPI"},"ServiceAPI")," as its parent. Services depends on the libraries present within the ",(0,i.kt)("a",{parentName:"p",href:"../../api/ServiceAPI"},"LibraryAPI")," along with other services within the ServiceAPI.\nSome things to keep in mind whilst making services:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"At the moment, there is not a system to prevent race conditions from forming (i.e service A needs to wait for service B, and service B needs to wait for service C, and service C needs service A to work).")),(0,i.kt)("p",null,"Unlike a typical ModuleScript, a Service ModuleScript's structure would look like the following:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'local ServiceAPITypes = script.Parent --Gets the Service\'s Type for intellisense\nlocal ServiceAPI: ServiceAPITypes.ServiceAPI = select(1, ...); --Waits for the ServiceAPI itself to be returned so it can access other services.\nif (not ServiceAPI) then\n    local ThreadScope: (...any) -> any? = debug.info(coroutine.running(), 1, "f");\n    return ThreadScope;\nend\nlocal LibraryAPI = ServiceAPI:GetService("LibraryAPI") --Gets the LibraryAPI so we could access all libraries.\nlocal NewLibraryLib = LibraryAPI:GetLibrary("NewLibrary") --Assuming we created the "Creating a Library" example, we can grab it by invoking LibraryAPI:GetLibrary.\n\nlocal NewService = ServiceAPI.Draft("NewServiceName") do\n    -- Any local variables or procedures here\n    -- Any number of functions here\n    function NewService.invokeFancyMelon()\n        --Can be anything really. In this case, we\'ll use fooBar from the NewLibrary\n        return NewLibraryLib.fooBar()\n    end\nend\n\nexport type NewService = typeof(NewService) --An exported type such that this library\'s functionality could be accessed by other systems.\n--If you\'re using "Roblox LSP", you could get this type by using "---@module <path to this Library>"\n\nServiceAPI:Publish(NewService) --Let the ServiceAPI know that this service has finished initializing and is ready to be used by other services.\n')),(0,i.kt)("p",null,"If you're using Visual Studio Code, here's a quick snippet you can use:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'[\n"local ServiceAPITypes = script.Parent",\n"local ServiceAPI: ServiceAPITypes.ServiceAPI = select(1, ...);",\n"if (not ServiceAPI) then",\n"\\tlocal ThreadScope: (...any) -> any? = debug.info(coroutine.running(), 1, \\"f\\");",\n"\\treturn ThreadScope;",\n"end",\n"local LibraryAPI = ServiceAPI:GetService(\\"LibraryAPI\\") --Gets the LibraryAPI so we could access all libraries.",\n"",\n"",\n"local ${0:$TM_FILENAME_BASE} = ServiceAPI.Draft(\\"${0:$TM_FILENAME_BASE}\\") do",\n"\\t${1}",\n"end",\n"export type ${0:$TM_FILENAME_BASE}Lib = typeof(${0:$TM_FILENAME_BASE})",\n"",\n"return ${0:$TM_FILENAME_BASE}"\n]\n')))}p.isMDXComponent=!0}}]);